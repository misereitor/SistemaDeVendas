// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SistemaDeVendas.Data;

#nullable disable

namespace SistemaDeVendas.Migrations
{
    [DbContext(typeof(ConexaoDBContext))]
    [Migration("20230621155911_DBs")]
    partial class DBs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EmpresaModelUsuarioModel", b =>
                {
                    b.Property<int>("EmpresasId")
                        .HasColumnType("integer");

                    b.Property<int>("UsuariosId")
                        .HasColumnType("integer");

                    b.HasKey("EmpresasId", "UsuariosId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("EmpresaModelUsuarioModel");
                });

            modelBuilder.Entity("SistemaDeVendas.Models.EmpresaModels.EmpresaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaDeAtuacao")
                        .HasColumnType("integer");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IE")
                        .HasColumnType("text");

                    b.Property<string>("IM")
                        .HasColumnType("text");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("bytea");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParametroDeVendaId")
                        .HasColumnType("integer");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParametroDeVendaId");

                    b.ToTable("empresa");
                });

            modelBuilder.Entity("SistemaDeVendas.Models.EmpresaModels.ParametrosdeVendasModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BloqProducaoEstoqueNegativo")
                        .HasColumnType("boolean");

                    b.Property<bool>("BloqVendaEstoqueNegativo")
                        .HasColumnType("boolean");

                    b.Property<bool>("CadastroDeProdutoViaPedidoCompra")
                        .HasColumnType("boolean");

                    b.Property<bool>("CadastroDeProdutoViaPedidoVenda")
                        .HasColumnType("boolean");

                    b.Property<bool>("CupomTroca")
                        .HasColumnType("boolean");

                    b.Property<bool>("FechamentoCegoPDV")
                        .HasColumnType("boolean");

                    b.Property<float>("LimiteDeCreditoNovosCliente")
                        .HasColumnType("real");

                    b.Property<float>("LimiteNumerarioCaixa")
                        .HasColumnType("real");

                    b.Property<float>("MaxDescontoPOS")
                        .HasColumnType("real");

                    b.Property<float>("MaxDescontoPedido")
                        .HasColumnType("real");

                    b.Property<bool>("MovimentacaoEstoqViaXML")
                        .HasColumnType("boolean");

                    b.Property<int>("PrasoCupomTroca")
                        .HasColumnType("integer");

                    b.Property<int>("TipoImpressao")
                        .HasColumnType("integer");

                    b.Property<bool>("UtilizarLimiteCredito")
                        .HasColumnType("boolean");

                    b.Property<int>("ValidadeEntregaDeOrcamentoVenda")
                        .HasColumnType("integer");

                    b.Property<int>("ValidadeEntregaDePedidoVenda")
                        .HasColumnType("integer");

                    b.Property<int>("ValidadeEntregaPedidoCompra")
                        .HasColumnType("integer");

                    b.Property<int>("ValidadeEntregaorcamentoCompra")
                        .HasColumnType("integer");

                    b.Property<int>("ValidadeOrcamentoCompra")
                        .HasColumnType("integer");

                    b.Property<int>("ValidadeOrcamentoVenda")
                        .HasColumnType("integer");

                    b.Property<int>("ValorizacaoEstoque")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ParametrosdeVendas");
                });

            modelBuilder.Entity("SistemaDeVendas.Models.GeralModels.DadosBancarios.DadosBancariosEmpresaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Agencia")
                        .HasColumnType("numeric");

                    b.Property<int>("Bancos")
                        .HasColumnType("integer");

                    b.Property<decimal>("Conta")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DigitoAgencia")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DigitoConta")
                        .HasColumnType("numeric");

                    b.Property<int?>("EmpresaModelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaModelId");

                    b.ToTable("dadosBancariosEmpresa");
                });

            modelBuilder.Entity("SistemaDeVendas.Models.GeralModels.DadosBancarios.DadosBancariosUsuarioModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Agencia")
                        .HasColumnType("numeric");

                    b.Property<int>("Bancos")
                        .HasColumnType("integer");

                    b.Property<decimal>("Conta")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DigitoAgencia")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DigitoConta")
                        .HasColumnType("numeric");

                    b.Property<int?>("UsuarioModelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioModelId");

                    b.ToTable("dadosBancariosUsuario");
                });

            modelBuilder.Entity("SistemaDeVendas.Models.GeralModels.EnderecoModel.EnderecoEmpresaCorrespondenciaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EmpresaModelId")
                        .HasColumnType("integer");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaModelId");

                    b.ToTable("enderecoEmpresaCorrespondencia");
                });

            modelBuilder.Entity("SistemaDeVendas.Models.GeralModels.EnderecoModel.EnderecoEmpresaEntregaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EmpresaModelId")
                        .HasColumnType("integer");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaModelId");

                    b.ToTable("enderecoEmpresaEntrega");
                });

            modelBuilder.Entity("SistemaDeVendas.Models.GeralModels.EnderecoModel.EnderecoEmpresaFaturamentoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EmpresaModelId")
                        .HasColumnType("integer");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaModelId");

                    b.ToTable("enderecoEmpresaFaturamento");
                });

            modelBuilder.Entity("SistemaDeVendas.Models.GeralModels.EnderecoModel.EnderecoUsuarioModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("enderecousuario");
                });

            modelBuilder.Entity("SistemaDeVendas.Models.Permissoes.GrupoPermissoesModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmpresaModelId")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PermissoesJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UsuarioModelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaModelId");

                    b.HasIndex("UsuarioModelId");

                    b.ToTable("grupoPermissoes");
                });

            modelBuilder.Entity("SistemaDeVendas.Models.Permissoes.PermissaoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("PodeAcessar")
                        .HasColumnType("boolean");

                    b.Property<bool>("PodeAlterar")
                        .HasColumnType("boolean");

                    b.Property<bool>("PodeCriar")
                        .HasColumnType("boolean");

                    b.Property<bool>("PodeExcluir")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Permissao");
                });

            modelBuilder.Entity("SistemaDeVendas.Models.UsuariosModels.DocumentoUsuariosModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("FotoDocumento")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<int?>("UsuarioModelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioModelId");

                    b.ToTable("documentoUsuarios");
                });

            modelBuilder.Entity("SistemaDeVendas.Models.UsuariosModels.UsuarioModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("ADMPDV")
                        .HasColumnType("boolean");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Comissao")
                        .HasColumnType("real");

                    b.Property<bool>("Comprador")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int?>("EnderecoId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Foto")
                        .HasColumnType("bytea");

                    b.Property<string>("IE")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IM")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("OperadorPDV")
                        .HasColumnType("boolean");

                    b.Property<string>("RG")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Roles")
                        .HasColumnType("integer");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Sexo")
                        .HasColumnType("integer");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TipoPessoa")
                        .HasColumnType("integer");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("Vendedor")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.ToTable("usuario");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ADMPDV = true,
                            Ativo = true,
                            CNPJ = "26467564000122",
                            CPF = "",
                            Celular = "",
                            Comissao = 0f,
                            Comprador = true,
                            DataCriacao = new DateTimeOffset(new DateTime(2023, 6, 21, 15, 59, 10, 845, DateTimeKind.Unspecified).AddTicks(3464), new TimeSpan(0, 0, 0, 0, 0)),
                            DataNascimento = new DateOnly(2023, 6, 10),
                            Email = "teste@teste.com",
                            IE = "",
                            IM = "",
                            Nome = "Master",
                            Observacao = "",
                            OperadorPDV = true,
                            RG = "",
                            Roles = 0,
                            Senha = "V!V#tc%001",
                            Sexo = 0,
                            Site = "",
                            Telefone = "07536312387",
                            TipoPessoa = 1,
                            Usuario = "suporte",
                            Vendedor = true
                        });
                });

            modelBuilder.Entity("EmpresaModelUsuarioModel", b =>
                {
                    b.HasOne("SistemaDeVendas.Models.EmpresaModels.EmpresaModel", null)
                        .WithMany()
                        .HasForeignKey("EmpresasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaDeVendas.Models.UsuariosModels.UsuarioModel", null)
                        .WithMany()
                        .HasForeignKey("UsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SistemaDeVendas.Models.EmpresaModels.EmpresaModel", b =>
                {
                    b.HasOne("SistemaDeVendas.Models.EmpresaModels.ParametrosdeVendasModel", "ParametroDeVenda")
                        .WithMany()
                        .HasForeignKey("ParametroDeVendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParametroDeVenda");
                });

            modelBuilder.Entity("SistemaDeVendas.Models.GeralModels.DadosBancarios.DadosBancariosEmpresaModel", b =>
                {
                    b.HasOne("SistemaDeVendas.Models.EmpresaModels.EmpresaModel", null)
                        .WithMany("DadosBancarios")
                        .HasForeignKey("EmpresaModelId");
                });

            modelBuilder.Entity("SistemaDeVendas.Models.GeralModels.DadosBancarios.DadosBancariosUsuarioModel", b =>
                {
                    b.HasOne("SistemaDeVendas.Models.UsuariosModels.UsuarioModel", null)
                        .WithMany("DadosBancarios")
                        .HasForeignKey("UsuarioModelId");
                });

            modelBuilder.Entity("SistemaDeVendas.Models.GeralModels.EnderecoModel.EnderecoEmpresaCorrespondenciaModel", b =>
                {
                    b.HasOne("SistemaDeVendas.Models.EmpresaModels.EmpresaModel", null)
                        .WithMany("EnderecoCorrespondencia")
                        .HasForeignKey("EmpresaModelId");
                });

            modelBuilder.Entity("SistemaDeVendas.Models.GeralModels.EnderecoModel.EnderecoEmpresaEntregaModel", b =>
                {
                    b.HasOne("SistemaDeVendas.Models.EmpresaModels.EmpresaModel", null)
                        .WithMany("EnderecoEntrega")
                        .HasForeignKey("EmpresaModelId");
                });

            modelBuilder.Entity("SistemaDeVendas.Models.GeralModels.EnderecoModel.EnderecoEmpresaFaturamentoModel", b =>
                {
                    b.HasOne("SistemaDeVendas.Models.EmpresaModels.EmpresaModel", null)
                        .WithMany("EnderecoFaturamento")
                        .HasForeignKey("EmpresaModelId");
                });

            modelBuilder.Entity("SistemaDeVendas.Models.Permissoes.GrupoPermissoesModel", b =>
                {
                    b.HasOne("SistemaDeVendas.Models.EmpresaModels.EmpresaModel", null)
                        .WithMany("GrupoPermissoes")
                        .HasForeignKey("EmpresaModelId");

                    b.HasOne("SistemaDeVendas.Models.UsuariosModels.UsuarioModel", null)
                        .WithMany("Grupo")
                        .HasForeignKey("UsuarioModelId");
                });

            modelBuilder.Entity("SistemaDeVendas.Models.UsuariosModels.DocumentoUsuariosModel", b =>
                {
                    b.HasOne("SistemaDeVendas.Models.UsuariosModels.UsuarioModel", null)
                        .WithMany("Documentos")
                        .HasForeignKey("UsuarioModelId");
                });

            modelBuilder.Entity("SistemaDeVendas.Models.UsuariosModels.UsuarioModel", b =>
                {
                    b.HasOne("SistemaDeVendas.Models.GeralModels.EnderecoModel.EnderecoUsuarioModel", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId");

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("SistemaDeVendas.Models.EmpresaModels.EmpresaModel", b =>
                {
                    b.Navigation("DadosBancarios");

                    b.Navigation("EnderecoCorrespondencia");

                    b.Navigation("EnderecoEntrega");

                    b.Navigation("EnderecoFaturamento");

                    b.Navigation("GrupoPermissoes");
                });

            modelBuilder.Entity("SistemaDeVendas.Models.UsuariosModels.UsuarioModel", b =>
                {
                    b.Navigation("DadosBancarios");

                    b.Navigation("Documentos");

                    b.Navigation("Grupo");
                });
#pragma warning restore 612, 618
        }
    }
}
